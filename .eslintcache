[{"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/index.js":"1","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/App.js":"2","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Game.js":"3","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/GameContext.js":"4","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Stock.js":"5","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Waste.js":"6","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Foundation.js":"7","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/InGameMenu.js":"8","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Tableau.js":"9","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/FoundationStack.js":"10","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/TableauStack.js":"11","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Card.js":"12"},{"size":199,"mtime":1609620846491,"results":"13","hashOfConfig":"14"},{"size":271,"mtime":1660449938475,"results":"15","hashOfConfig":"14"},{"size":6468,"mtime":1661481565780,"results":"16","hashOfConfig":"14"},{"size":5602,"mtime":1661481874816,"results":"17","hashOfConfig":"14"},{"size":351,"mtime":1659836952627,"results":"18","hashOfConfig":"14"},{"size":123,"mtime":1659836952772,"results":"19","hashOfConfig":"14"},{"size":450,"mtime":1659836952443,"results":"20","hashOfConfig":"14"},{"size":169,"mtime":1656807301145,"results":"21","hashOfConfig":"14"},{"size":1417,"mtime":1660274774248,"results":"22","hashOfConfig":"14"},{"size":134,"mtime":1659836952548,"results":"23","hashOfConfig":"14"},{"size":1934,"mtime":1660530055328,"results":"24","hashOfConfig":"14"},{"size":2414,"mtime":1660530051235,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pvwc9e",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/index.js",[],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/App.js",[],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Game.js",["53","54","55","56","57","58","59","60","61","62"],"\nimport React, { useState, useEffect, useContext } from 'react'\nimport InGameMenu from './InGameMenu';\nimport Stock from './Stock';\nimport Waste from './Waste';\nimport Foundation from './Foundation';\nimport Tableau from './Tableau';\nimport { GameContext } from './GameContext';\n\n\nexport default function Game() {\n    const [deck, setDeck] = useState(null);\n\n\n    const gameContext = useContext(GameContext); \n    \n    \n    console.log(gameContext.deck);\n\n\n\n\n\n\n    // useEffect(() => {\n    //     let tempDeck = createDeck();\n    //     setDeck(tempDeck);\n    // }, []);\n\n    ////// ALL OF THE BELOW FUNCTIONS THAT HAVE TO DO WITH MAKING AND SHUFFLING THE DECK ARE BEING MOVED TO GameContext.js\n\n    // const createDeck = () => {\n    //     let cards = makeCards();\n    //     let shuffledCards = shuffleCards(cards);\n    //     let shuffledCardsWithLocations = assignCardsLocations(shuffledCards);\n    //     let shuffledCardsWithLocationsAndStacks = assignCardsStacks(shuffledCardsWithLocations);\n    //     //this statement actually puts the cards in order by key, though the variable name still includes \"shuffled\"; \n    //     let completedDeck = shuffledCardsWithLocationsAndStacks.sort((a, b) => {\n    //         return a.key - b.key\n    //     })\n\n    //     return completedDeck;\n    // }\n\n    // console.log(deck); \n\n    // const makeCards = () => {\n    //     let suits = ['diamond', 'heart', 'club', 'spade'];\n    //     let cardRanks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    //     let tempDeck = [];\n    //     let cardColor;\n\n    //     for (let i = 0; i < suits.length; i++) {\n    //         if (suits[i] === 'diamond' || suits[i] === 'heart') {\n    //             cardColor = 'red';\n    //         } else {\n    //             cardColor = 'black';\n    //         }\n    //         for (let j = 0; j < cardRanks.length; j++) {\n    //             let newCard = {\n    //                 rank: cardRanks[j],\n    //                 suit: suits[i],\n    //                 color: cardColor,\n    //                 key: (i * cardRanks.length) + j\n    //             }\n    //             tempDeck.push(newCard);\n    //         }\n    //     }\n\n    //     return tempDeck;\n    // }\n\n    // const shuffleCards = (cards) => {\n    //     let tempDeck = JSON.parse(JSON.stringify(cards));\n\n    //     for (let i = tempDeck.length - 1; i > 0; i--) {\n    //         let randIndex = Math.floor(Math.random() * i + 1);\n    //         let tempCard = tempDeck[i];\n    //         tempDeck[i] = tempDeck[randIndex];\n    //         tempDeck[randIndex] = tempCard;\n    //     }\n\n    //     return tempDeck;\n    // }\n\n    // const assignCardsLocations = (cards) => {\n    //     let tempDeck = JSON.parse(JSON.stringify(cards));\n\n    //     let numCardsInTableau = 28;\n    //     let numCardsInStock = 24;\n\n    //     for (let i = 0; i < tempDeck.length; i++) {\n    //         let card = tempDeck[i];\n\n    //         if (i < numCardsInTableau) {\n    //             card.location = 'tableau';\n    //         } else {\n    //             card.location = 'stock';\n    //         }\n    //     }\n\n    //     return tempDeck;\n    // }\n\n    // //for now, I am setting stackNum and numWithinStack to \"i + 1\" rather than going off the zero based array. \n    // // I feel like it would be strange for stack 3 to have 4 cards in it. Or for the 2nd card in a stack to be number one.\n    // // It seems like if there are visual elements that you can actually see, then I shouldn't use the zero based array.  \n    // const assignCardsStacks = (cards) => {\n    //     let tempDeck = JSON.parse(JSON.stringify(cards));\n\n    //     let tableau = tempDeck.filter(c => c.location === 'tableau');\n    //     let stock = tempDeck.filter(c => c.location === 'stock');\n\n    //     let newTableau = [];\n    //     let cardCount = 0;\n    //     let i = 0;\n\n    //     while (cardCount < tableau.length) {\n    //         let stackNum = i + 1;\n    //         let numOfCardsInStack = stackNum;\n    //         let stackArr = tableau.slice(cardCount, cardCount + numOfCardsInStack)\n\n    //         cardCount += numOfCardsInStack\n\n    //         for (let i = 0; i < stackArr.length; i++) {\n    //             let card = stackArr[i];\n    //             card.stackNum = stackNum;\n    //             card.numWithinStack = i + 1;\n    //         }\n\n    //         newTableau.push(...stackArr);\n\n    //         i++\n    //     }\n\n    //     tableau = newTableau;\n\n    //     for (let i = 0; i < stock.length; i++) {\n    //         let card = stock[i];\n    //         card.stackNum = 1;\n    //         card.numWithinStack = i + 1;\n    //     }\n\n    //     tempDeck = [...tableau, ...stock];\n\n    //     return tempDeck;\n    // }\n\n    const selectCard = () => {\n\n    }\n\n    const moveCard = () => {\n\n    }\n\n    const undo = () => {\n\n    }\n\n    const separateStockWasteFoundationAndTableau = (cards) => {\n        let tempDeck = JSON.parse(JSON.stringify(cards));\n\n        let stock = tempDeck.filter(c => c.location === \"stock\");\n        let waste = tempDeck.filter(c => c.location === \"waste\");\n        let foundation = tempDeck.filter(c => c.location === \"foundation\");\n        let tableau = tempDeck.filter(c => c.location === \"tableau\");\n\n        return [stock, waste, foundation, tableau];\n    }\n\n    // const [stock, waste, foundation, tableau] = separateStockWasteFoundationAndTableau(deck);\n\n    // console.log(stock); \n    // console.log(waste); \n    // console.log(foundation); \n    // console.log(tableau); \n\n    const separateTableauIntoStacks = (cards) => {\n        let tableauArr = JSON.parse(JSON.stringify(cards));\n        let tableauStacksArr = [];\n        let numOfStacks = 7\n\n        for (let i = 0; i < numOfStacks; i++) {\n            let stackNum = i + 1;\n            let stack = tableauArr.filter(c => c.stackNum === stackNum);\n            stack.sort((a, b) => a.numWithinStack - b.numWithinStack)\n            tableauStacksArr.push(stack);\n        }\n\n        return tableauStacksArr;\n    }\n\n    // let tableauStacksArr = separateTableauIntoStacks(tableau); \n\n    // console.log(tableauStacksArr);\n\n    return deck && (\n        <div className={'game-outer-container'}>\n            <InGameMenu />\n            <div className={'stock-and-foundation-container'}>\n                {/* <Stock cardsArr={stock} /> */}\n                <Waste />\n                {/* <Foundation cardsArr={foundation} />  */}\n            </div>\n            {/* <Tableau cardsArr={tableau} />  */}\n\n        </div>\n    )\n}\n",["63","64"],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/GameContext.js",["65","66","67"],"import React, { useState, useEffect } from 'react'\n\nexport const GameContext = React.createContext({});\n\nexport default function GameContextProvider({ children }) {\n\n    const deckArrayToObject = deckArray => deckArray.reduce((deckBuilder, card) => {\n        deckBuilder[card.id] = card;\n        return deckBuilder;\n    }, {});\n\n\n\n    const createDeck = () => {\n        let cards = makeCards();\n        let shuffledCards = shuffleCards(cards);\n        let shuffledCardsWithLocations = assignCardsLocations(shuffledCards);\n        let shuffledCardsWithLocationsAndStacks = assignCardsStacks(shuffledCardsWithLocations);\n        //this statement actually puts the cards in order by key, though the variable name still includes \"shuffled\"; \n        let reorderedDeckArray = shuffledCardsWithLocationsAndStacks.sort((a, b) => {\n            return a.key - b.key\n        })\n\n        let completedDeckObj = deckArrayToObject(reorderedDeckArray); \n\n        return completedDeckObj;\n    }\n\n    // console.log(deck); \n\n    const makeCards = () => {\n        let suits = ['diamond', 'heart', 'club', 'spade'];\n        let cardRanks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n        let tempDeck = [];\n        let cardColor;\n\n        for (let i = 0; i < suits.length; i++) {\n            if (suits[i] === 'diamond' || suits[i] === 'heart') {\n                cardColor = 'red';\n            } else {\n                cardColor = 'black';\n            }\n            for (let j = 0; j < cardRanks.length; j++) {\n                let newCard = {\n                    rank: cardRanks[j],\n                    suit: suits[i],\n                    color: cardColor,\n                    key: (i * cardRanks.length) + j,\n                    id: `${suits[i]}${cardRanks[j]}`\n                }\n                tempDeck.push(newCard);\n            }\n        }\n\n        return tempDeck;\n    }\n\n    const shuffleCards = (cards) => {\n        let tempDeck = JSON.parse(JSON.stringify(cards));\n\n        for (let i = tempDeck.length - 1; i > 0; i--) {\n            let randIndex = Math.floor(Math.random() * i + 1);\n            let tempCard = tempDeck[i];\n            tempDeck[i] = tempDeck[randIndex];\n            tempDeck[randIndex] = tempCard;\n        }\n\n        return tempDeck;\n    }\n\n    const assignCardsLocations = (cards) => {\n        let tempDeck = JSON.parse(JSON.stringify(cards));\n\n        let numCardsInTableau = 28;\n        let numCardsInStock = 24;\n\n        for (let i = 0; i < tempDeck.length; i++) {\n            let card = tempDeck[i];\n\n            if (i < numCardsInTableau) {\n                card.location = 'tableau';\n            } else {\n                card.location = 'stock';\n            }\n        }\n\n        return tempDeck;\n    }\n\n    const assignCardsStacks = (cards) => {\n        let tempDeck = JSON.parse(JSON.stringify(cards));\n\n        let tableau = tempDeck.filter(c => c.location === 'tableau');\n        let stock = tempDeck.filter(c => c.location === 'stock');\n\n        let newTableau = [];\n        let cardCount = 0;\n        let i = 0;\n\n        while (cardCount < tableau.length) {\n            let stackNum = i + 1;\n            let numOfCardsInStack = stackNum;\n            let stackArr = tableau.slice(cardCount, cardCount + numOfCardsInStack)\n\n            cardCount += numOfCardsInStack\n\n            for (let i = 0; i < stackArr.length; i++) {\n                let card = stackArr[i];\n                card.stackNum = stackNum;\n                card.numWithinStack = i + 1;\n            }\n\n            newTableau.push(...stackArr);\n\n            i++\n        }\n\n        tableau = newTableau;\n\n        for (let i = 0; i < stock.length; i++) {\n            let card = stock[i];\n            card.stackNum = 1;\n            card.numWithinStack = i + 1;\n        }\n\n        tempDeck = [...tableau, ...stock];\n\n        return tempDeck;\n    }\n\n\n\n\n\n    //THIS IS JP'S WAY OF CREATING A DECK. I MIGHT REFACTOR MINE TO BE MORE LIKE THIS LATER, BUT FOR NOW I AM USING MY LONG WINDED CODE\n    // const createDeck = () =>\n    // deckArrayToObject(\n    // [1,2,3,4,5,6,7,8,9,10,11,12,13].map((rank, r) => \n    //     ['spade', 'heart', 'club', 'diamond'].map((suit, s) => ({\n    //         id: `${suit}${rank}`,\n    //         suit: suit,\n    //         rank:rank,\n    //         location: \"i don't know, a pile?\",\n    //         sortOrder: (s + 1) * (r + 1)\n    //     }))    \n    // ).flat());\n\n    const [deck, setDeck] = useState(createDeck())\n\n    const changeCard = (cardId, property, value) => {\n        \n        let tmpDeck = deck;\n\n        tmpDeck[cardId][property] = value;\n\n        setDeck(deck => tmpDeck)\n    }\n\n    const shuffleDeck = () => {\n\n        let tmpDeckList = Object.values(deck).sort((a, b) => !!Math.round(Math.random()) ? 1 : -1)\n                          .map((card, i) => ({...card, sortOrder: i}));\n\n        setDeck(deck => deckArrayToObject(tmpDeckList));\n    }\n\n    const getSortedDeck = () => Object.values(deck).sort((a, b) => a.sortOrder > b.sortOrder ? 1 : -1);\n\n\n    //// Region: Board\n\n    const [board, setBoard] = useState({\n        stock: {},\n        waste: {},\n        foundation: {},\n        tableau: {\n            stack1: {\n                cardOrder: [\"spade7\", \"heart3\"]\n            }\n        }\n    })\n\n    const getTableauStackCards = stackNumber => board.tableau[`stack${stackNumber}`].cardOrder.map(cardId => deck[cardId]);\n\n    return (\n        <GameContext.Provider value={{\n            deck,\n            changeCard,\n            getSortedDeck,\n            shuffleDeck,\n            board,\n            getTableauStackCards,\n        }}>{children}</GameContext.Provider>\n    )\n}","/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Stock.js",[],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Waste.js",[],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Foundation.js",["68"],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/InGameMenu.js",[],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Tableau.js",["69","70"],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/FoundationStack.js",[],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/TableauStack.js",["71","72","73"],"/Users/jonathanwallace/Desktop/EVERYTHING/Programming/Projects/REACT/solitaire/src/Card.js",["74","75","76","77","78"],{"ruleId":"79","severity":1,"message":"80","line":2,"column":27,"nodeType":"81","messageId":"82","endLine":2,"endColumn":36},{"ruleId":"79","severity":1,"message":"83","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":13},{"ruleId":"79","severity":1,"message":"84","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":18},{"ruleId":"79","severity":1,"message":"85","line":7,"column":8,"nodeType":"81","messageId":"82","endLine":7,"endColumn":15},{"ruleId":"79","severity":1,"message":"86","line":12,"column":18,"nodeType":"81","messageId":"82","endLine":12,"endColumn":25},{"ruleId":"79","severity":1,"message":"87","line":149,"column":11,"nodeType":"81","messageId":"82","endLine":149,"endColumn":21},{"ruleId":"79","severity":1,"message":"88","line":153,"column":11,"nodeType":"81","messageId":"82","endLine":153,"endColumn":19},{"ruleId":"79","severity":1,"message":"89","line":157,"column":11,"nodeType":"81","messageId":"82","endLine":157,"endColumn":15},{"ruleId":"79","severity":1,"message":"90","line":161,"column":11,"nodeType":"81","messageId":"82","endLine":161,"endColumn":49},{"ruleId":"79","severity":1,"message":"91","line":179,"column":11,"nodeType":"81","messageId":"82","endLine":179,"endColumn":36},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"96","line":75,"column":13,"nodeType":"81","messageId":"82","endLine":75,"endColumn":28},{"ruleId":"79","severity":1,"message":"97","line":172,"column":19,"nodeType":"81","messageId":"82","endLine":172,"endColumn":27},{"ruleId":"79","severity":1,"message":"98","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":23,"column":31,"nodeType":"101","messageId":"102","endLine":23,"endColumn":33},{"ruleId":"103","severity":1,"message":"104","line":33,"column":8,"nodeType":"105","endLine":33,"endColumn":10,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":42,"column":8,"nodeType":"105","endLine":42,"endColumn":10,"suggestions":"108"},{"ruleId":"79","severity":1,"message":"109","line":44,"column":11,"nodeType":"81","messageId":"82","endLine":44,"endColumn":18},{"ruleId":"79","severity":1,"message":"110","line":48,"column":11,"nodeType":"81","messageId":"82","endLine":48,"endColumn":21},{"ruleId":"79","severity":1,"message":"111","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"112","line":8,"column":11,"nodeType":"81","messageId":"82","endLine":8,"endColumn":16},{"ruleId":"79","severity":1,"message":"113","line":9,"column":11,"nodeType":"81","messageId":"82","endLine":9,"endColumn":19},{"ruleId":"79","severity":1,"message":"114","line":10,"column":11,"nodeType":"81","messageId":"82","endLine":10,"endColumn":19},{"ruleId":"79","severity":1,"message":"115","line":13,"column":11,"nodeType":"81","messageId":"82","endLine":13,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Stock' is defined but never used.","'Foundation' is defined but never used.","'Tableau' is defined but never used.","'setDeck' is assigned a value but never used.","'selectCard' is assigned a value but never used.","'moveCard' is assigned a value but never used.","'undo' is assigned a value but never used.","'separateStockWasteFoundationAndTableau' is assigned a value but never used.","'separateTableauIntoStacks' is assigned a value but never used.","no-native-reassign",["116"],"no-negated-in-lhs",["117"],"'numCardsInStock' is assigned a value but never used.","'setBoard' is assigned a value but never used.","'FoundationStack' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.cardsArr'. Either include it or remove the dependency array.","ArrayExpression",["118"],"React Hook useEffect has a missing dependency: 'newTableauStack'. Either include it or remove the dependency array.",["119"],"'addCard' is assigned a value but never used.","'removeCard' is assigned a value but never used.","'useState' is defined but never used.","'color' is assigned a value but never used.","'location' is assigned a value but never used.","'stackNum' is assigned a value but never used.","'identity' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [props.cardsArr]",{"range":"124","text":"125"},"Update the dependencies array to be: [newTableauStack]",{"range":"126","text":"127"},[975,977],"[props.cardsArr]",[1460,1462],"[newTableauStack]"]